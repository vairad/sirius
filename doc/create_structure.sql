-- MySQL Script generated by MySQL Workbench
-- So 29. červenec 2017, 12:50:21 CEST
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema sirius
-- -----------------------------------------------------
-- Databázové schéma sirius webu 2.0

-- -----------------------------------------------------
-- Schema sirius
--
-- Databázové schéma sirius webu 2.0
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `sirius` DEFAULT CHARACTER SET utf8 COLLATE utf8_czech_ci ;
USE `sirius` ;

-- -----------------------------------------------------
-- Table `sirius`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sirius`.`user` ;

CREATE TABLE IF NOT EXISTS `sirius`.`user` (
  `user_id` INT(10) NOT NULL AUTO_INCREMENT,
  `person_id` INT(20) NOT NULL,
  `name` VARCHAR(60) NOT NULL,
  `nick` VARCHAR(60) NOT NULL,
  `surname` VARCHAR(60) NOT NULL,
  `photo` VARCHAR(200) NULL DEFAULT 'pictures/users/blank.png',
  `function` VARCHAR(200) NULL,
  `bio` TEXT NULL,
  `last_log_time` DATETIME NULL,
  `create_time` DATETIME NULL,
  `update_time` DATETIME NULL,
  `verified` TINYINT(1) NOT NULL,
  PRIMARY KEY (`user_id`))
ENGINE = InnoDB
COMMENT = 'Tabulka uživatelů aplikace';

CREATE UNIQUE INDEX `person_id_UNIQUE` ON `sirius`.`user` (`person_id` ASC);


-- -----------------------------------------------------
-- Table `sirius`.`c_role_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sirius`.`c_role_type` ;

CREATE TABLE IF NOT EXISTS `sirius`.`c_role_type` (
  `role_id` INT(10) NOT NULL,
  `prog_code` VARCHAR(45) NOT NULL,
  `description` TEXT NOT NULL,
  `name` VARCHAR(60) NOT NULL,
  `create_time` DATETIME NULL,
  `update_time` DATETIME NULL,
  PRIMARY KEY (`role_id`));

CREATE UNIQUE INDEX `name_UNIQUE` ON `sirius`.`c_role_type` (`name` ASC);

CREATE UNIQUE INDEX `prog_code_UNIQUE` ON `sirius`.`c_role_type` (`prog_code` ASC);


-- -----------------------------------------------------
-- Table `sirius`.`user_role`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sirius`.`user_role` ;

CREATE TABLE IF NOT EXISTS `sirius`.`user_role` (
  `user_id` INT(10) NOT NULL,
  `role_id` INT(10) NOT NULL,
  `assigner` INT(10) NOT NULL,
  `create_time` DATETIME NULL,
  `update_time` DATETIME NULL,
  PRIMARY KEY (`user_id`, `role_id`),
  CONSTRAINT `fk_users_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `sirius`.`user` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_roles_c_role_types`
    FOREIGN KEY (`role_id`)
    REFERENCES `sirius`.`c_role_type` (`role_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_assigner`
    FOREIGN KEY (`user_id`)
    REFERENCES `sirius`.`user` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

CREATE INDEX `fk_roles_c_role_types_idx` ON `sirius`.`user_role` (`role_id` ASC);


-- -----------------------------------------------------
-- Table `sirius`.`c_artefact_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sirius`.`c_artefact_type` ;

CREATE TABLE IF NOT EXISTS `sirius`.`c_artefact_type` (
  `artefact_type_id` INT(10) NOT NULL,
  `long_name` TEXT NOT NULL,
  `short_name` VARCHAR(100) NOT NULL,
  `update_time` DATETIME NULL,
  `create_time` DATETIME NULL,
  PRIMARY KEY (`artefact_type_id`));


-- -----------------------------------------------------
-- Table `sirius`.`artefact`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sirius`.`artefact` ;

CREATE TABLE IF NOT EXISTS `sirius`.`artefact` (
  `user_id` INT(10) NOT NULL,
  `artefact_id` INT(10) NOT NULL AUTO_INCREMENT,
  `photo` VARCHAR(100) NULL,
  `content` TEXT NOT NULL,
  `artefact_type` INT(10) NOT NULL,
  `create_time` DATETIME NULL,
  `update_time` DATETIME NULL,
  PRIMARY KEY (`artefact_id`),
  CONSTRAINT `fk_artefact_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `sirius`.`user` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_artefact_type`
    FOREIGN KEY (`artefact_type`)
    REFERENCES `sirius`.`c_artefact_type` (`artefact_type_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

CREATE INDEX `fk_artefact_type_idx` ON `sirius`.`artefact` (`artefact_type` ASC);


-- -----------------------------------------------------
-- Table `sirius`.`c_connection_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sirius`.`c_connection_type` ;

CREATE TABLE IF NOT EXISTS `sirius`.`c_connection_type` (
  `connection_type_id` INT(10) NOT NULL,
  `code_name` VARCHAR(100) NOT NULL,
  `create_time` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `update_time` DATETIME NULL,
  PRIMARY KEY (`connection_type_id`));

CREATE UNIQUE INDEX `code_name_UNIQUE` ON `sirius`.`c_connection_type` (`code_name` ASC);


-- -----------------------------------------------------
-- Table `sirius`.`artefact_links`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sirius`.`artefact_links` ;

CREATE TABLE IF NOT EXISTS `sirius`.`artefact_links` (
  `artefact_id` INT(10) NOT NULL,
  `linked_artefact` INT(10) NOT NULL,
  `connection_type` INT(10) NOT NULL,
  `create_time` DATETIME NULL,
  `update_time` DATETIME NULL,
  PRIMARY KEY (`artefact_id`, `linked_artefact`),
  CONSTRAINT `fk_artefact_links_1`
    FOREIGN KEY (`artefact_id`)
    REFERENCES `sirius`.`artefact` (`artefact_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_artefact_links_2`
    FOREIGN KEY (`linked_artefact`)
    REFERENCES `sirius`.`artefact` (`artefact_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_artefact_links_3`
    FOREIGN KEY (`connection_type`)
    REFERENCES `sirius`.`c_connection_type` (`connection_type_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

CREATE INDEX `fk_artefact_links_2_idx` ON `sirius`.`artefact_links` (`linked_artefact` ASC);

CREATE INDEX `fk_artefact_links_3_idx` ON `sirius`.`artefact_links` (`connection_type` ASC);

USE `sirius`;

DELIMITER $$

USE `sirius`$$
DROP TRIGGER IF EXISTS `sirius`.`user_BEFORE_INSERT` $$
USE `sirius`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sirius`.`user_BEFORE_INSERT` BEFORE INSERT ON `user` FOR EACH ROW
BEGIN
	SET NEW.create_time = CURRENT_TIMESTAMP;
END$$


USE `sirius`$$
DROP TRIGGER IF EXISTS `sirius`.`user_BEFORE_UPDATE` $$
USE `sirius`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sirius`.`user_BEFORE_UPDATE` BEFORE UPDATE ON `user` FOR EACH ROW
BEGIN
	SET NEW.update_time = CURRENT_TIMESTAMP;
END$$


USE `sirius`$$
DROP TRIGGER IF EXISTS `sirius`.`c_role_type_BEFORE_INSERT` $$
USE `sirius`$$
CREATE TRIGGER `sirius`.`c_role_type_BEFORE_INSERT` BEFORE INSERT ON `c_role_type` FOR EACH ROW
BEGIN
	SET NEW.create_time = CURRENT_TIMESTAMP;
END$$


USE `sirius`$$
DROP TRIGGER IF EXISTS `sirius`.`c_role_type_BEFORE_UPDATE` $$
USE `sirius`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sirius`.`c_role_type_BEFORE_UPDATE` BEFORE UPDATE ON `c_role_type` FOR EACH ROW
BEGIN
	SET NEW.update_time = CURRENT_TIMESTAMP;
END$$


USE `sirius`$$
DROP TRIGGER IF EXISTS `sirius`.`user_role_BEFORE_INSERT` $$
USE `sirius`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sirius`.`user_role_BEFORE_INSERT` BEFORE INSERT ON `user_role` FOR EACH ROW
BEGIN
	SET NEW.create_time = CURRENT_TIMESTAMP;
END$$


USE `sirius`$$
DROP TRIGGER IF EXISTS `sirius`.`user_role_BEFORE_UPDATE` $$
USE `sirius`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sirius`.`user_role_BEFORE_UPDATE` BEFORE UPDATE ON `user_role` FOR EACH ROW
BEGIN
	SET NEW.update_time = CURRENT_TIMESTAMP;
END$$


USE `sirius`$$
DROP TRIGGER IF EXISTS `sirius`.`c_artefact_type_BEFORE_INSERT` $$
USE `sirius`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sirius`.`c_artefact_type_BEFORE_INSERT` BEFORE INSERT ON `c_artefact_type` FOR EACH ROW
BEGIN
	SET NEW.create_time = CURRENT_TIMESTAMP;
END$$


USE `sirius`$$
DROP TRIGGER IF EXISTS `sirius`.`c_artefact_type_BEFORE_UPDATE` $$
USE `sirius`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sirius`.`c_artefact_type_BEFORE_UPDATE` BEFORE UPDATE ON `c_artefact_type` FOR EACH ROW
BEGIN
	SET NEW.update_time = CURRENT_TIMESTAMP;
END$$


USE `sirius`$$
DROP TRIGGER IF EXISTS `sirius`.`artefact_BEFORE_INSERT` $$
USE `sirius`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sirius`.`artefact_BEFORE_INSERT` BEFORE INSERT ON `artefact` FOR EACH ROW
BEGIN
	SET NEW.create_time = CURRENT_TIMESTAMP;
END$$


USE `sirius`$$
DROP TRIGGER IF EXISTS `sirius`.`artefact_BEFORE_UPDATE` $$
USE `sirius`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sirius`.`artefact_BEFORE_UPDATE` BEFORE UPDATE ON `artefact` FOR EACH ROW
BEGIN
	SET NEW.update_time = CURRENT_TIMESTAMP;
END$$


USE `sirius`$$
DROP TRIGGER IF EXISTS `sirius`.`c_connection_type_BEFORE_INSERT` $$
USE `sirius`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sirius`.`c_connection_type_BEFORE_INSERT` BEFORE INSERT ON `c_connection_type` FOR EACH ROW
BEGIN
	SET NEW.create_time = CURRENT_TIMESTAMP;
END$$


USE `sirius`$$
DROP TRIGGER IF EXISTS `sirius`.`c_connection_type_BEFORE_UPDATE` $$
USE `sirius`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sirius`.`c_connection_type_BEFORE_UPDATE` BEFORE UPDATE ON `c_connection_type` FOR EACH ROW
BEGIN
	SET NEW.update_time = CURRENT_TIMESTAMP;
END$$


USE `sirius`$$
DROP TRIGGER IF EXISTS `sirius`.`artefact_links_BEFORE_INSERT` $$
USE `sirius`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sirius`.`artefact_links_BEFORE_INSERT` BEFORE INSERT ON `artefact_links` FOR EACH ROW
BEGIN
	SET NEW.create_time = CURRENT_TIMESTAMP;
END$$


USE `sirius`$$
DROP TRIGGER IF EXISTS `sirius`.`artefact_links_BEFORE_UPDATE` $$
USE `sirius`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sirius`.`artefact_links_BEFORE_UPDATE` BEFORE UPDATE ON `artefact_links` FOR EACH ROW
BEGIN
	SET NEW.update_time = CURRENT_TIMESTAMP;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
